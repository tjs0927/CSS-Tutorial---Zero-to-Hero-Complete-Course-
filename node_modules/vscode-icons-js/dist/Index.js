"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIconForOpenFolder = exports.getIconForFile = exports.getIconForFolder = exports.DEFAULT_FILE = exports.DEFAULT_ROOT_OPENED = exports.DEFAULT_ROOT = exports.DEFAULT_FOLDER_OPENED = exports.DEFAULT_FOLDER = void 0;
var FileExtensions1ToIcon_1 = require("./generated/FileExtensions1ToIcon");
var FileExtensions2ToIcon_1 = require("./generated/FileExtensions2ToIcon");
var FileNamesToIcon_1 = require("./generated/FileNamesToIcon");
var FolderNamesToIcon_1 = require("./generated/FolderNamesToIcon");
var LanguagesToIcon_1 = require("./generated/LanguagesToIcon");
exports.DEFAULT_FOLDER = 'default_folder.svg';
exports.DEFAULT_FOLDER_OPENED = 'default_folder_opened.svg';
exports.DEFAULT_ROOT = 'default_root_folder.svg';
exports.DEFAULT_ROOT_OPENED = 'default_root_folder_opened.svg';
exports.DEFAULT_FILE = 'default_file.svg';
/**
 * Get icon for a folder
 * @param folderName name of folder to find icon for
 * @return icon filename
 */
function getIconForFolder(folderName) {
    var folderIcon = FolderNamesToIcon_1.FolderNamesToIcon[folderName];
    return folderIcon ? folderIcon : exports.DEFAULT_FOLDER;
}
exports.getIconForFolder = getIconForFolder;
var prevExtension = undefined;
var prevIcon = undefined;
/**
 * Get icon for a file
 * @param fileName name of file to find icon for
 * @return icon filename
 */
function getIconForFile(fileName) {
    // match by exact FileName
    var iconFromFileName = FileNamesToIcon_1.FileNamesToIcon[fileName];
    if (iconFromFileName !== undefined) {
        return iconFromFileName;
    }
    // match by File Extension
    var extensions = fileName.split('.');
    if (extensions.length > 2) {
        var ext1 = extensions.pop();
        var ext2 = extensions.pop();
        // check for `.js.map`, `test.tsx`, ...
        var iconFromExtension2 = FileExtensions2ToIcon_1.FileExtensions2ToIcon[ext2 + "." + ext1];
        if (iconFromExtension2 !== undefined) {
            return iconFromExtension2;
        }
        // check for `.js`, `tsx`, ...
        if (!ext1) {
            // If there's no extension, return DEFAULT_ICON
            return exports.DEFAULT_FILE;
        }
        if (ext1 === prevExtension) {
            return prevIcon;
        }
        var iconFromExtension1 = FileExtensions1ToIcon_1.FileExtensions1ToIcon[ext1];
        if (iconFromExtension1 !== undefined) {
            // memoization
            prevExtension = ext1;
            prevIcon = iconFromExtension1;
            return iconFromExtension1;
        }
    }
    else {
        var ext = extensions.pop();
        if (!ext) {
            // If there's no extension, return DEFAULT_ICON
            return exports.DEFAULT_FILE;
        }
        if (ext === prevExtension) {
            return prevIcon;
        }
        var iconFromExtension = FileExtensions1ToIcon_1.FileExtensions1ToIcon[ext];
        if (iconFromExtension !== undefined) {
            // memoization
            prevExtension = ext;
            prevIcon = iconFromExtension;
            return iconFromExtension;
        }
    }
    // match by language
    var fileExtension = fileName.split('.').pop();
    if (fileExtension !== undefined) {
        var iconFromLang = LanguagesToIcon_1.LanguagesToIcon[fileExtension];
        if (iconFromLang) {
            return iconFromLang;
        }
    }
    // if there's no icon for file, use default one
    return exports.DEFAULT_FILE;
}
exports.getIconForFile = getIconForFile;
/**
 * Get icon for an opened folder
 * @param folderName name of opened folder to icon for
 * @return icon filename
 */
function getIconForOpenFolder(folderName) {
    return getIconForFolder(folderName).split('.').shift() + '_opened.svg';
}
exports.getIconForOpenFolder = getIconForOpenFolder;
